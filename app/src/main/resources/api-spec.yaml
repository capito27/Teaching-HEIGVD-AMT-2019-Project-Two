openapi: 3.0.0
info:
  description: This is the API for business
  version: 1.0.0-oas3
  title: APP-AMT-Project-Two
  contact:
    email: mickael.bonjour@heig-vd.ch
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: users
    description: Operations available to regular users authenticated via JWT Token
  - name: admins
    description: Secured Admin-only calls
components:
  schemas:
    Stadium:
      type: object
      required:
        - id
        - name
        - location
        - numberPlaces
      properties:
        id:
          type: number
          example: 1
        name:
          type: string
          example: Stade de France
        location:
          type: string
          example: France
        numberPlaces:
          type: number
          example: 35000
    Team:
      type: object
      required:
        - id
        - name
        - country
      properties:
        id:
          type: number
          example: 1
        name:
          type: string
          example: FC Lausanne
        country:
          type: string
          example: Switzerland
    Match:
      type: object
      required:
        - id
        - team1
        - score1
        - team2
        - score2
        - location
      properties:
        id:
          type: number
          example: 1
        team1:
          type: string
          example: /teams/{id}
        score1:
          type: number
          example: 3
        team2:
          type: string
          example: /teams/{id}
        score2:
          type: number
          example: 5
        location:
          type: string
          example: /stadiums/{id}
    MatchDetails:
      allOf:
        - $ref: '#/components/schemas/Stadium'
        - type: object
          required:
            - userFK
          properties:
            userFK:
              type: string
              example: /users/{id}

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    ForbiddenError:
      description: You are not authorized to use this ressource
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
paths:
  /matches:
    get:
      tags:
        - users
      security:
        - bearerAuth: []
      summary: Get all matches
      operationId: getMatchesByUser
      description: >
        You can get all the matches of the database (but you don't know who created them)
      produces:
        - application/json
      responses:
        '200':
          description: Getting all the matches
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Match'
    post:
      tags:
        - users
      security:
        - bearerAuth: []
      summary: Add a new match
      operationId: addMatch
      description: >
        You can add a match if you are authenticated
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Match'
      responses:
        '200':
          description: Match added
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /stadiums:
    get:
      tags:
        - users
      security:
        - bearerAuth: []
      summary: Get all stadiums
      operationId: getStadiumsByUser
      description: >
        You can get all the stadiums of the database
      produces:
        - application/json
      responses:
        '200':
          description: Getting all the stadiums
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stadium'
    post:
      tags:
        - admins
      security:
        - bearerAuth: []
      summary: Add a new stadium
      operationId: addStadium
      description: >
        You can add a match if you are authenticated and admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stadium'
      responses:
        '200':
          description: Stadium added
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /teams:
    get:
      tags:
        - users
      security:
        - bearerAuth: []
      summary: Get all teams
      operationId: getTeamsByUser
      description: >
        You can get all the teams of the database
      produces:
        - application/json
      responses:
        '200':
          description: Getting all the teams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
    post:
      tags:
        - admins
      security:
        - bearerAuth: []
      summary: Add a new team
      operationId: addTeam
      description: >
        You can add a team if you are authenticated and admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
      responses:
        '200':
          description: Team added
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /matches/{matchId}:
    get:
      tags:
        - users
      security:
        - bearerAuth: []
      operationId: getMatchById
      parameters:
        - in: path
          name: matchId
          description: Id of the match asked
          required: true
          schema:
            type: number
      produces:
        - application/json
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
          description: Update of the match completed
    put:
      tags:
        - users
      security:
        - bearerAuth: []
      operationId: updateMatch
      parameters:
        - in: path
          name: matchId
          description: Id of the match asked
          required: true
          schema:
            type: number
      responses:
        '200':
          description: The match is updated
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /teams/{teamId}:
    get:
      tags:
        - users
      security:
        - bearerAuth: []
      operationId: getTeamById
      parameters:
        - in: path
          name: teamId
          description: Id of the team asked
          required: true
          schema:
            type: number
      produces:
        - application/json
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: Update of the team completed
    put:
      tags:
        - admins
      security:
        - bearerAuth: []
      operationId: updateTeam
      parameters:
        - in: path
          name: teamId
          description: Id of the team asked
          required: true
          schema:
            type: number
      responses:
        '200':
          description: The team is updated
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    delete:
      tags:
        - admins
      security:
        - bearerAuth: []
      operationId: deleteTeam
      parameters:
        - in: path
          name: teamId
          description: Id of the team to delete
          required: true
          schema:
            type: number
      responses:
        '200':
          description: The team is deleted

  /stadiums/{stadiumId}:
    get:
      tags:
        - users
      operationId: getStadiumById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: stadiumId
          description: Id of the stadium asked
          required: true
          schema:
            type: number
      produces:
        - application/json
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stadium'
          description: Update of the stadium completed
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    delete:
      tags:
        - admins
      security:
        - bearerAuth: []
      operationId: deleteStadium
      parameters:
        - in: path
          name: stadiumId
          description: Id of the stadium to delete
          required: true
          schema:
            type: number
      responses:
        '200':
          description: The stadium is deleted
    put:
      tags:
        - admins
      security:
        - bearerAuth: []
      operationId: updateStadium
      parameters:
        - in: path
          name: stadiumId
          description: Id of the stadium asked
          required: true
          schema:
            type: number
      responses:
        '200':
          description: The stadium is updated
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /resignations:
    post:
      tags:
        - users
      security:
        - bearerAuth: []
      operationId: deleteMatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Match'
      responses:
        '200':
          description: The Match is deleted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'


servers:
  - url: 'https://localhost/api/app/'
  - url: 'http://localhost/api/app/'