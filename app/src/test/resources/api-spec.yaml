openapi: 3.0.0
info:
  description: This is the API for business
  version: 1.0.0-oas3
  title: APP-AMT-Project-Two
  contact:
    email: mickael.bonjour@heig-vd.ch
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
components:
  links:
    PaginateMatchRequest:
      description: >
        This link with grab another set of matches
      operationId: getMatchesByUser
      parameters:
        page: '$request.path.page'
        pageSize: '$request.path.page'
  schemas:
    Stadium:
      type: object
      required:
        - name
        - location
        - numberOfPlaces
      properties:
        name:
          type: string
          example: Stade de France
        location:
          type: string
          example: France
        numberOfPlaces:
          type: integer
          example: 35000
    Team:
      type: object
      required:
        - name
        - country
      properties:
        name:
          type: string
          example: FC Lausanne
        country:
          type: string
          example: Switzerland
    Match:
      type: object
      required:
        - team1
        - score1
        - team2
        - score2
        - location
      properties:
        team1:
          type: string
          example: /teams/{id}
        score1:
          type: integer
          example: 3
        team2:
          type: string
          example: /teams/{id}
        score2:
          type: integer
          example: 5
        location:
          type: string
          example: /stadiums/{id}
    MatchDetails:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              example: 1
        - $ref: '#/components/schemas/Match'
    StadiumDetails:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              example: 1
        - $ref: '#/components/schemas/Stadium'
    TeamDetails:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              example: 1
        - $ref: '#/components/schemas/Team'

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    ForbiddenError:
      description: You are not authorized to use this ressource
    NotFoundError:
      description: The ID you provided doesn't exist in our database
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
paths:
  /matches:
    get:
      security:
        - bearerAuth: []
      summary: Get all matches
      operationId: getMatchesByUser
      parameters:
        - in: query
          name: page
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: number of elements per page
          required: false
          schema:
            type: integer
            default: 10
      description: >
        You can get all the matches of the database (but you don't know who created them)
      responses:
        '200':
          description: Getting all the matches
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MatchDetails'
          links:
            NextLink:
              $ref: '@/components/links/PaginateMatchRequest'
            LastLink:
              $ref: '@/components/links/PaginateMatchRequest'
            FirstLink:
              $ref: '@/components/links/PaginateMatchRequest'
            PrevLink:
              $ref: '@/components/links/PaginateMatchRequest'

        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    post:
      security:
        - bearerAuth: []
      summary: Add a new match
      operationId: addMatch
      description: >
        You can add a match if you are authenticated
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Match'
      responses:
        '201':
          description: Match added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchDetails'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/ForbiddenError'

  /stadiums:
    get:
      security:
        - bearerAuth: []
      summary: Get all stadiums
      operationId: getStadiumsByUser
      description: >
        You can get all the stadiums of the database
      responses:
        '200':
          description: Getting all the stadiums
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StadiumDetails'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    post:
      security:
        - bearerAuth: []
      summary: Add a new stadium
      operationId: addStadium
      description: >
        You can add a match if you are authenticated and admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stadium'
      responses:
        '201':
          description: Stadium added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StadiumDetails'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /teams:
    get:
      security:
        - bearerAuth: []
      summary: Get all teams
      operationId: getTeamsByUser
      description: >
        You can get all the teams of the database
      responses:
        '200':
          description: Getting all the teams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamDetails'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    post:
      security:
        - bearerAuth: []
      summary: Add a new team
      operationId: addTeam
      description: >
        You can add a team if you are authenticated and admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
      responses:
        '201':
          description: Team added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDetails'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /matches/{matchId}:
    get:
      security:
        - bearerAuth: []
      operationId: getMatchById
      parameters:
        - in: path
          name: matchId
          description: Id of the match asked
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
          description: Update of the match completed
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      security:
        - bearerAuth: []
      operationId: updateMatch
      parameters:
        - in: path
          name: matchId
          description: Id of the match asked
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Match'
      responses:
        '200':
          description: The match is updated
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /teams/{teamId}:
    get:
      security:
        - bearerAuth: []
      operationId: getTeamById
      parameters:
        - in: path
          name: teamId
          description: Id of the team asked
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: Update of the team completed
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      security:
        - bearerAuth: []
      operationId: updateTeam
      parameters:
        - in: path
          name: teamId
          description: Id of the team asked
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
      responses:
        '200':
          description: The team is updated
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      security:
        - bearerAuth: []
      operationId: deleteTeam
      parameters:
        - in: path
          name: teamId
          description: Id of the team to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The team is deleted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /stadiums/{stadiumId}:
    get:
      operationId: getStadiumById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: stadiumId
          description: Id of the stadium asked
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stadium'
          description: Update of the stadium completed
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      security:
        - bearerAuth: []
      operationId: deleteStadium
      parameters:
        - in: path
          name: stadiumId
          description: Id of the stadium to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The stadium is deleted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      security:
        - bearerAuth: []
      operationId: updateStadium
      parameters:
        - in: path
          name: stadiumId
          description: Id of the stadium asked
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stadium'
      responses:
        '200':
          description: The stadium is updated
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /cancellations:
    post:
      security:
        - bearerAuth: []
      operationId: deleteMatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatchDetails'
      responses:
        '200i':
          description: The Match is deleted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'


servers:
  - url: 'https://localhost/api/app/'
  - url: 'http://localhost/api/app/'
